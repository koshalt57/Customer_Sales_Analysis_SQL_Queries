create database case_study

select * from fact
select * from location
select * from product


--1 Display the number of states present in the LocationTable.
select count(distinct state) as num_of_states from location 

--2 How many products are of regular type?
select count(product) as tot_regular_prods from product
where type='regular'

--3 How much spending has been done on marketing of product ID 1?
select sum(marketing) as marketing_spendings from fact
where productid=1


--4 What is the minimum sales of a product?
select min(sales) from fact

--5 Display the max Cost of Good Sold (COGS). 
select max(COGS) from fact

--6 Display the details of the product where product type is coffee. 
select * from product where product_type='coffee'

--7 Display the details where total expenses are greater than 40. 
select * from fact where total_expenses > 40

--8 What is the average sales in area code 719?
select avg(sales) as avg_sales from fact
where area_code=719

--9 Find out the total profit generated by Colorado state
select sum(profit) as profit_colorado from fact F
join location L
on F.area_code=L.area_code
where state='colorado'

--10. Display the average inventory for each product ID. 
select productid,avg(inventory) from fact
group by productid
order by productid

--11. Display state in a sequential order in a Location Table. 
select distinct state from location order by state


--12. Display the average budget of the Product where the average budget margin should be greater than 100. 
select productid,avg(budget_margin) as budget_avg from fact
group by productid
having avg(budget_margin)>100


--13. What is the total sales done on date 2010-01-01?
select sum(sales) as tot_sales from fact where date='2010-01-01'


--14. Display the average total expense of each product ID on an individual date. 
select avg (total_expenses),productid,date from fact 
group by productid, date
order by productid, date


--15. Display the table with the following attributes such as date, productID, product_type, 
--product, sales, profit, state, area_code. 
select date, P.productID, product_type,product, sales, profit, state, L.area_code from fact F
join product P
on p.productid=F.productid
join location L
on L.area_code=F.area_code


--16. Display the rank without any gap to show the sales wise rank. 
select sales, dense_rank()over(order by sales desc) as ranks from fact


--17. Find the state wise profit and sales. 
select state, sum(profit),sum(sales) from fact F
join location L 
on F.area_code=L.area_code
group by state
order by state


--18. Find the state wise profit and sales along with the productname. 
select state, product,sum(profit) as sum,sum(sales) as sales from fact F
join location L 
on F.area_code=L.area_code
join product P
on F.productid=p.productid
group by state, product
order by state, product


--19. If there is an increase in sales of 5%, calculate the increasedsales. 
select sales,(sales*0.05) as '5%',sales+(sales*0.05) as increased_sale from fact


--20. Find the maximum profit along with the product ID and producttype. 
select F.productid,P.Product_Type,max(Profit) from fact F
join product P
on F.productid=P.productid
group by P.productid
having profit=(select max(profit) from fact)


--21. Create a stored procedure to fetch the result according to the product type from Product Table. 
create procedure stp_prod_type @input varchar(50)
as 
select * from product where Product_Type=@input
exec stp_prod_type 'tea'


--22. Write a query by creating a condition in which if the total expenses is less than
--60 then it is a profit or else loss.
select *,iif(total_expenses < 60,'profit','loss') as profit_loss from fact


--23. Give the total weekly sales value with the date and product ID details. Use
--roll-up to pull the data in hierarchical order. 
Select datepart(Week,Date),ProductId,Sum(Sales) as sum_sales from fact
Group by datepart(WEEK,Date),ProductId
with rollup


--24. Apply union and intersection operator on the tables which consist of attribute area code. 
select area_code from fact 
union 
select area_code from location 

select area_code from fact 
intersect
select area_code from location 


--25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference. 
create function udf_prod_type (@input varchar(50))
returns table
as return
select * from Product where Product_Type=@input

select * from udf_prod_type ('tea')


--26. Change the product type from coffee to tea where product ID is 1 and undo it. 
begin tran
update Product set product_type = 'tea' where productid=1
select * from Product
rollback tran


--27. Display the date, product ID and sales where total expenses are between 100 to 200. 
select date,productid,sales from fact where Total_Expenses between 100 and 200
order by ProductId


--28. Delete the records in the Product Table for regular type. 
delete from product where type='regular'


--29. Display the ASCII value of the fifth character from the columnProduct
select *,substring(product,5,1) as [5th_char],ascii(substring(product,5,1)) as ascii_value from product